@model cloudscribe.SimpleContent.Web.ViewModels.BlogViewModel
@using cloudscribe.Web.Common.Extensions
@inject ISiteContextResolver siteResolver
@{
    var imageUrl = Model.ExtractFirstImageUrl(Model.CurrentPost, Url);

    ImageSizeResult zourf = new ImageSizeResult();// Width = "1200", Height = "641");

    zourf.Width = "1200";
    zourf.Height = "641";

    try
    {
        zourf = Model.ExtractFirstImageDimensions(Model.CurrentPost);
    }
    catch { };

    var Tenant = await siteResolver.ResolveSite(Context.Request.Host.Host, Context.Request.Path);
    var folderSegment = "";
    if(!string.IsNullOrWhiteSpace(Tenant.SiteFolderName))
    {
        folderSegment = Tenant.SiteFolderName + "/";
    }
    var rssUrl = string.Format("/{0}api/rss/", folderSegment);
    

}
@if (Model.CurrentPost != null && !string.IsNullOrEmpty(Model.CurrentPost.MetaDescription))
{
    <meta name="description" content="@Model.CurrentPost.MetaDescription" />
    <meta property="og:title" content="@Model.CurrentPost.Title" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@ViewContext.HttpContext.Request.GetCurrentFullUrl()" />
    @if (!string.IsNullOrEmpty(imageUrl))
    {
    <meta property="og:image" content="@imageUrl" />
    <meta property="og:image:secure_url" content="@imageUrl" />
        var yeps = System.IO.Path.GetExtension(imageUrl);
        if (string.IsNullOrEmpty(yeps) == false)
        {
            yeps = yeps.Replace(".", "").Trim();
    <link rel="image_src" type="image/@yeps" href="@imageUrl" />
    <meta property="og:image:type" content="image/@yeps" />
        }
        //<meta property="og:image:width" content="1200" />
        //<meta property="og:image:height" content="375" />
        if (zourf.Width.Contains("%"))
        {
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="375" />
        }
        if (zourf.Width.Contains("px"))
        {
    <meta property="og:image:width" content="@zourf.Width.Replace("px","").Replace("%","").Trim()" />
    <meta property="og:image:height" content="@zourf.Height.Replace("px","").Replace("%","").Trim()" />
        }
    }
    <meta property="og:description" content="@Model.CurrentPost.MetaDescription" />
    @if (!string.IsNullOrWhiteSpace(Model.ProjectSettings.SiteName))
    {
        <meta property="og:site_name" content="@Model.ProjectSettings.SiteName" />
    }
    @if (!string.IsNullOrWhiteSpace(Model.ProjectSettings.FacebookAppId))
    {
        <meta property="fb:app_id" content="@Model.ProjectSettings.FacebookAppId" />
    }

    <meta name="twitter:card" content="summary">
    @if (!string.IsNullOrWhiteSpace(Model.ProjectSettings.TwitterPublisher))
    {
        <meta name="twitter:site" content="@Model.ProjectSettings.TwitterPublisher" />
    }
    <meta name="twitter:title" content="@Model.CurrentPost.Title">
    <meta name="twitter:description" content="@Model.CurrentPost.MetaDescription">
    @if (!string.IsNullOrWhiteSpace(Model.ProjectSettings.TwitterCreator))
    {
        <meta name="twitter:creator" content="@Model.ProjectSettings.TwitterCreator" />
    }
    @if (!string.IsNullOrEmpty(imageUrl))
    {
        <meta name="twitter:image" content="@imageUrl" />
    }

}
@*
    TODO: implement this stuff
    RSD: Discoverability of Blog APIs
    http://mashupguide.net/1.0/html/ch05s06.xhtml
    http://en.wikipedia.org/wiki/Really_Simple_Discovery
    <link type="application/rsd+xml" rel="edituri" title="RSD" href="~/views/robots/rsd" />

    <link type="application/atom+xml" rel="alternate" title="@Model.BlogSettings.Title" href="~/feed/atom/" />
*@
@*<link type="application/rss+xml" rel="alternate" title="@Model.ProjectSettings.Title" href="@rssUrl" />*@

@if (!string.IsNullOrWhiteSpace(Model.ProjectSettings.SiteName))
{
    <link type="application/rss+xml" rel="alternate" title="@Model.ProjectSettings.SiteName" href="~/api/rss/" />
}
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="~/wlwmanifest.xml" />
